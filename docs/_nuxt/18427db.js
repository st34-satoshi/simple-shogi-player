(window.webpackJsonp=window.webpackJsonp||[]).push([[77,22,35],{281:function(e,n,t){"use strict";t.d(n,"a",(function(){return r}));var r=t(789),o=new r.Renderer;o.table=function(header,body){return'\n  <div class="table_wrap">\n    <table>\n      <thead>'.concat(header,"</thead>\n      <tbody>").concat(body,"</tbody>\n    </table>\n  </div>")},r.setOptions({renderer:o,gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,smartLists:!0,smartypants:!1})},289:function(e,n,t){"use strict";n.a="### Vue CLI\n\n  * 手順を半自動化したスクリプト [shogi-player-vue-cli-sample-create.sh](https://github.com/akicho8/shogi-player/blob/master/shogi-player-vue-cli-sample-create.sh) を参考にしてみてください\n  * そのスクリプトをそのまま実行して生成したものを https://github.com/akicho8/shogi-player/tree/master/shogi-player-vue-cli-sample に置いています\n\n### Nuxt.js\n\n  * いろんな箇所を変更するため半自動化スクリプトでの生成は断念しました\n  * 手動で組み込んだ例を https://github.com/akicho8/shogi-player/tree/master/shogi-player-nuxt-sample に置いています\n\n### 共通する組み込みポイント\n\n  * `node_modules/shogi-player` 以下を babel のビルド対象に含める\n    * これをやらないと JavaScript のクラス定数や `??` 演算子が解釈できずビルドできない\n  * file-loader で *.wav をファイル化するときに `esModule: false` オプションをつける\n    * これをやらないと wav ファイルへのパスが文字列でなくなって音が出ない\n  * オーディオライブラリ `Howler.js` を事前に import する\n    * これをやらないと音が出ない\n  * process 定数がグローバルに存在するようにする\n    * そうしないと `process` を参照しているライブラリがビルドできない\n"}}]);